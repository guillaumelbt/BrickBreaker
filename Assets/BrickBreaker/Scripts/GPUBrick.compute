#pragma kernel CSEvolve
#pragma kernel CSReset

#pragma kernel CSWorldEvolve
#pragma kernel CSWorldReset

#pragma enable_d3d11_debug_symbols

#include "input.cginc"

struct BallData
{
    float2 pos;
    float2 speed;
    uint status;
};

uniform RWStructuredBuffer<BallData> _BallData;
uniform uint _BallDataSize;

struct WorldData
{
    float2 handlePos;
    float2 handleSize;

    float2 worldSize;

    uint lostBallCount;
};

uniform RWStructuredBuffer<WorldData> _WorldData;

struct BrickData
{
    uint hp;
    uint damage;
    float4 color;
};

uniform RWStructuredBuffer<BrickData> _BrickData;
uniform uint _BrickX;
uniform uint _BrickY;
uniform uint _BrickDataSize;


float2 CalculateBrickPosition(uint x, uint y)
{
    return float2(0, 0);
}

float2 CalculateBrickSize()
{
    return float2(0, 0);
}

bool IsBallCollidingWithBrick(float2 ballPos, float2 brickPos, float2 brickSize)
{
    return false;
}

float2 ReflectBall(float2 speed, float2 ballPos, float2 brickPos, float2 brickSize)
{
    return -speed;
}

[numthreads(32,1,1)]
void CSEvolve (uint3 id : SV_DispatchThreadID)
{
    uint ballIndex = id.x;
    if (ballIndex >= _BallDataSize || _BallData[ballIndex].status > 0)
    {
        return;
    }

    BallData ball = _BallData[ballIndex];
    float2 pos = ball.pos;
    float2 speed = ball.speed;
    float deltaTime = GetDT();
    
    if (ballIndex < _BallDataSize)
    {
        float2 pos = _BallData[ballIndex].pos;
        float2 speed = _BallData[ballIndex].speed;
        pos += speed * GetDT();
        
        if(pos.y < -_WorldData[0].worldSize.y + _WorldData[0].handleSize.x/2 && (pos.x > (_WorldData[0].handlePos.x - _WorldData[0].handleSize.y/2) && pos.x < _WorldData[0].handlePos.x + _WorldData[0].handleSize.y/2))
        {
            float dif = pos.y + _WorldData[0].worldSize.y  - _WorldData[0].handleSize.x/2;
            speed = speed - 2 *( speed * float2(0,-1)) * float2(0,-1);
            pos.y = -_WorldData[0].worldSize.y  + _WorldData[0].handleSize.x/2 - dif;
        }
        else if(pos.y < -_WorldData[0].worldSize.y)
        {
             _BallData[ballIndex].status = 1;
             _WorldData[0].lostBallCount++;
        }
        else if(pos.y > _WorldData[0].worldSize.y)
        {
            float dif = pos.y - _WorldData[0].worldSize.y;
            speed= speed - 2 *( speed * float2(0,-1)) * float2(0,-1);
            pos.y = _WorldData[0].worldSize.y - dif;
            
        }
        else if(pos.x > _WorldData[0].worldSize.x)
        {
            float dif = pos.x - _WorldData[0].worldSize.x;
            speed = speed - 2 *( speed * float2(-1,0)) * float2(-1,0); 
            pos.x = _WorldData[0].worldSize.x - dif;
            
        }   
        else if( pos.x < -_WorldData[0].worldSize.x)
        {
            float dif = pos.x + _WorldData[0].worldSize.x;
            speed = speed - 2 *( speed * float2(-1,0)) * float2(-1,0); 
            pos.x = -_WorldData[0].worldSize.x -dif;
        }
        
        float2 cornerHG = float2(-_WorldData[0].worldSize.x, _WorldData[0].worldSize.y);
        float2 cornerBD = float2(_WorldData[0].worldSize.x, 0);

        
        float2 f = floor(((pos - cornerHG)/(cornerBD-cornerHG))*float2(_BrickX,_BrickY));

        float index = f.x + f.y * _BrickX;
        if(index < _BrickDataSize)
        {
            if(_BrickData[index].damage<_BrickData[index].hp)
            {
                InterlockedAdd(_BrickData[index].damage,_BrickData[index].damage++);
                float2 normal = 0;
                float2 AB = float2(f) + float2(0,-0.5+_WorldData[0].worldSize.x/_BrickX/2);
                float2 AC = float2(f) - float2(pos);
                
                const float cr = cross(float3(AB,0),float3(AC,0));
                
                if(cr>= 0)
                {
                    normal = float2(0,1);
                }
                else
                    normal = float2(-1,0);
                speed -= 2 * dot(speed, normal) * normal;

                // float2 brickCenter = float2(_BrickX,_BrickY) ;//+ CalculateBrickSize() * 0.5f;
                // float2 ballToBrick = pos - brickCenter;
                //
                // bool isVerticalCollision = abs(ballToBrick.x) < abs(ballToBrick.y);
                //
                // float2 collisionNormal;
                // if (isVerticalCollision)
                // {
                //     collisionNormal = float2(0, sign(ballToBrick.y));
                // }
                // else
                // {
                //     collisionNormal = float2(sign(ballToBrick.x), 0);
                // }
                //
                // speed -= 2 * dot(speed, collisionNormal) * collisionNormal;
            }
            
        }

        _BallData[ballIndex].pos = pos;
        _BallData[ballIndex].speed = speed;
    }
}

[numthreads(32,1,1)]
void CSReset (uint3 id : SV_DispatchThreadID)
{
    if (id.x < _BallDataSize)
    {
        _BallData[id.x].pos = float2(0, -0.5);
        _BallData[id.x].speed = float2(cos(id.x), sin(id.x));
        _BallData[id.x].status = 0;
    }

    for(uint i =0;i < _BrickDataSize;i++)
    {
        _BrickData[i].hp = 1;
        _BrickData[i].damage = 0;
        _BrickData[i].color = (i % 2) ? float4(1,0,0,0) : float4(0,1,0,0);
    }
}

[numthreads(1,1,1)]
void CSWorldEvolve (uint3 id : SV_DispatchThreadID)
{
    float speed = 5;
    
    float posX = _WorldData[0].handlePos.x;
    posX += GetDT() * (GetRightDown() * speed + GetLeftDown() * -speed);
    
    if( posX < -_WorldData[0].worldSize.x )
    {
        float dif = posX + _WorldData[0].worldSize.x;
        posX = -_WorldData[0].worldSize.x - dif;
    }
    else if(posX > _WorldData[0].worldSize.x )
    {
        float dif = posX - _WorldData[0].worldSize.x ;
        posX = _WorldData[0].worldSize.x - dif;
    }
    _WorldData[0].handlePos.x = posX;
    
}

[numthreads(1,1,1)]
void CSWorldReset (uint3 id : SV_DispatchThreadID)
{
    _WorldData[0].worldSize = 5;

    _WorldData[0].handlePos = float2(0,-_WorldData[0].worldSize.y);
    _WorldData[0].handleSize = float2(0.1, 3);

    _WorldData[0].lostBallCount = 0;
}

